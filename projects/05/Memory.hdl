// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux4Way(in=load, sel=address[13..14], a=outram1, b=outram2, c=outscreen, d=outkbd); 

    Or(a=outram1, b=outram2, out=orram1ram2); 
    RAM16K(in=in, load=orram1ram2, address=address[0..13], out=outramfinal); 

    Screen(in=in, load=outscreen, address=address[0..12], out=outscreenfinal); 
    Keyboard(out=OUTKeyboard); 

    Mux4Way16(a=outramfinal, b=outramfinal, c=outscreenfinal, d=OUTKeyboard, sel=address[13..14], out=out);

    //DMux(in=load, sel=in[14], a=loadIn, b=notLoadIn);
    //DMux4Way(in=loadIn, sel[1]=in[14], sel[0]=in[13], a=loadRAM1, b=loadRAM2, c=loadScreen, d=loadKBD);

    //Or(a=loadRAM1, b=loadRAM2, out=loadRAM);
    //RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    //Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    //Keyboard(out=outKBD);
    
    //Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=false, sel[1]=in[14], sel[0]=in[13], out=out);

    // Load Keyboard
    // And(a=in[14], b=in[13], out=addKBD);
    // And(a=load, b=addKBD, out=loadKBD);
    
    // Load Screen
    // Not(in=in[13], out=notLoadKBD);
    // And(a=notLoadKBD, b=in[14], out=addScreen);
    // And(a=load, b=addScreen, out=loadScreen);

    // Load RAM
    // Not(in=in[14], out=addRAM);
    // And(a=load, b=addRAM, out=loadRAM);

    // RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    // Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    // Keyboard(out=outKBD);
   
    // Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKBD, sel[1]=in[14], sel[0]=in[13], out=out);
}