// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A register load MUX
    Mux16(a=instruction, b=outALU, sel=instruction[15],out=outInst);
    
    // A register load logic
    Not(in=instruction[15], out=notInst15);
    Or(a=instruction[5], b=notInst15, out=loadA);
    ARegister(in=outInst, load=loadA, out=outAreg, out[0..14]=addressM);

    // D register load logic
    And (a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=outDreg);
    

    // ALU logic
    Mux16(a=outAreg, b=inM, sel=instruction[12], out=outAorM);
    ALU(x=outDreg, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zero, ng=negatif);
    
    // writeM logic
    And(a=instruction[3], b=instruction[15], out=writeM);


    Or(a=zero, b=negatif, out=notOutPositive);
    Not(in=notOutPositive, out=outPositive);

    // ALU output positive and jump greater than zero initiated
    And(a=instruction[0], b= outPositive, out=jgt);

    // ALU output positive and jump equal to zero initiated
    And(a=instruction[1], b=zero, out=jeq);

    // ALU output positive and jump lesser than zero initiated
    And(a=instruction[2], b=negatif, out=jlt);

    // Any jump condition true then jump
    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jlt, in[3..7]=false, out=jmp);

    // Do not jump on A-Instruction.
    Mux(a=false, b=jmp, sel=instruction[15], out=loadPC);

    // Increment PC unless reset or load commands are present.
    // PC also outputs the next ROM address to read.
    PC(in=outAreg, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}