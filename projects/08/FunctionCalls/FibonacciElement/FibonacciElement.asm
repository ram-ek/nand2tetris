//Bootstrap code
@261
D=A
@SP
M=D
@Sys.init
0;JMP
//function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
(LOOP_LCL_0)
@OUT_0
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@LOOP_LCL_0
D=D-1;JMP
(OUT_0)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@SET_TRUE0
D;JLT
@SP
A=M
M=0
@END0
0;JMP
(SET_TRUE0)
@SP
A=M
M=-1
(END0)
@SP
M=M+1
//if-goto IF_TRUE
@SP
M=M-1
@SP
A=M
D=M
@Main.fibonacci$IF_TRUE
D;JNE
//goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
//label IF_TRUE
(Main.fibonacci$IF_TRUE)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//return 
@LCL
D=M
@Main.fibonacci$endFrame.1
M=D
@5
D=A
@Main.fibonacci$endFrame.1
A=M-D
D=M
@Main.fibonacci$retAddr.1
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@Main.fibonacci$endFrame.1
M=M-1
A=M
D=M
@THAT
M=D
@Main.fibonacci$endFrame.1
M=M-1
A=M
D=M
@THIS
M=D
@Main.fibonacci$endFrame.1
M=M-1
A=M
D=M
@ARG
M=D
@Main.fibonacci$endFrame.1
M=M-1
A=M
D=M
@LCL
M=D
@Main.fibonacci$retAddr.1
A=M
0;JMP
//label IF_FALSE
(Main.fibonacci$IF_FALSE)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//call Main.fibonacci 1
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//call Main.fibonacci 1
@Main.fibonacci$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.3)
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
//return 
@LCL
D=M
@Main.fibonacci$endFrame.4
M=D
@5
D=A
@Main.fibonacci$endFrame.4
A=M-D
D=M
@Main.fibonacci$retAddr.4
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@Main.fibonacci$endFrame.4
M=M-1
A=M
D=M
@THAT
M=D
@Main.fibonacci$endFrame.4
M=M-1
A=M
D=M
@THIS
M=D
@Main.fibonacci$endFrame.4
M=M-1
A=M
D=M
@ARG
M=D
@Main.fibonacci$endFrame.4
M=M-1
A=M
D=M
@LCL
M=D
@Main.fibonacci$retAddr.4
A=M
0;JMP
//function Sys.init 0
(Sys.init)
@0
D=A
(LOOP_LCL_5)
@OUT_5
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@LOOP_LCL_5
D=D-1;JMP
(OUT_5)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1
@Main.fibonacci$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.6)
//label WHILE
(Sys.init$WHILE)
//goto WHILE
@Sys.init$WHILE
0;JMP
